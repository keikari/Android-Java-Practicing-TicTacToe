package com.example.bettertictactoe;


import android.content.Context;
import android.graphics.Color;
import android.media.Image;
import android.support.constraint.ConstraintLayout;
import android.support.constraint.ConstraintSet;
import android.util.Log;
import android.view.View;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.TextView;

import java.lang.invoke.ConstantCallSite;
import java.util.ArrayList;
import java.util.List;

public class Game
{
    enum TileType
    {
        BLANK,
        X,
        O
    }
    
    private TextView gameText;
    private ArrayList<ImageView> gameTiles;
    private GridLayout gameLayout;
    private final int amountOfRows;
    private final int amountOfCols;
    private final int screenWidth;
    private final int screenHeight;
    private boolean isWon = false;
    private String player1 = "Player1";
    private String player2 = "Player2";
    private String currentPlayer = player1;
    private int inRowToWin;
    List<ImageView> rowToCheck;
    List<ImageView> colToCheck;
    List<ImageView> ltrCrossCheck;
    List<ImageView> rtlCrossCheck;
    List<List<ImageView>> checkArrays;
    int maxCheckArrayLength;
    int checkRowArrayLength;
    int checkColArrayLength;
    int minCheckArrayLength;
    
    Context context;
    
    Game(int screenWidth, int screenHeight, int amountOfRows, int amountOfCols, int inRowToWin, ConstraintLayout mainLayout, Context context)
    {
        //Initialize context
        this.context = context;
        
        //Initilize checkin arrays
        this.inRowToWin = inRowToWin;
        maxCheckArrayLength = (inRowToWin * 2) - 1;
        //Make sure check array length isn't more than shortest side of the game board
        if(maxCheckArrayLength > amountOfRows)
        {
            checkColArrayLength = amountOfRows;
            checkRowArrayLength = maxCheckArrayLength;
        }
        else if(maxCheckArrayLength > amountOfCols)
        {
            checkRowArrayLength = amountOfCols;
            checkColArrayLength = maxCheckArrayLength;
        }
        else
        {
            checkColArrayLength = maxCheckArrayLength;
            checkRowArrayLength = maxCheckArrayLength;
        }
        minCheckArrayLength = Math.min(checkColArrayLength, checkRowArrayLength);
        
        
        
        rowToCheck = new ArrayList<ImageView>(0);
        colToCheck = new ArrayList<ImageView>(0);
        ltrCrossCheck = new ArrayList<ImageView>(0);
        rtlCrossCheck = new ArrayList<ImageView>(0);
        
        //Put checking arrays here before actual cheking to make code shorter
        checkArrays = new ArrayList<List<ImageView>>(0);
        
        //Add passed values to class
        this.amountOfRows = amountOfRows;
        this.amountOfCols = amountOfCols;
        this.screenHeight = screenHeight;
        this.screenWidth = screenWidth;
        
        //Initialize gameLayout
        gameLayout = new GridLayout(context);
        int gameLayoutID = View.generateViewId();
        gameLayout.setId(gameLayoutID);
        gameLayout.setBackgroundColor(R.color.black);
    
        //Initialize gameText
        gameText = new TextView(context);
        int gameTextID = View.generateViewId();
        gameText.setId(gameTextID);
        gameText.setText("Test");
        gameText.setTextColor(Color.BLACK);
        gameText.setTextSize(60);
        
        //Add gameLayout to main layout
        mainLayout.addView(gameLayout);
        
        //Add gameText to main layout
        mainLayout.addView(gameText);
        
        //Set how things are in gameLayout
        ConstraintSet mainViewSet = new ConstraintSet();
        mainViewSet.clone(mainLayout);
        mainViewSet.centerHorizontally(gameLayout.getId(), R.id.mainGameLayout);
        mainViewSet.centerVertically(gameLayout.getId(), R.id.mainGameLayout);
        mainViewSet.centerHorizontally(gameText.getId(), gameLayout.getId());
        mainLayout.setConstraintSet(mainViewSet);
        
        //Initialize gameTiles array
        gameTiles = new ArrayList<ImageView>(amountOfRows * amountOfCols);
        createTiles();
        
    }
    
    private int calculateTileSideLength()
    {
        //Calculate good tile size for game
        final int maxTileSize = 200;
        int tilesWidth = screenWidth/amountOfCols;
        int tilesHeight = screenHeight/amountOfRows;
        
        //Return "best" tile size
        if(tilesWidth <= tilesHeight && tilesWidth <= maxTileSize)
        {
            return tilesWidth;
        }
        else if (tilesHeight <= maxTileSize)
        {
            return tilesHeight;
        }
        else
        {
            return maxTileSize;
        }
    }
    
    private void createTiles()
    {
        //Create tiles
        int tileSideSize = calculateTileSideLength();
        int currentRow = 0;
        int currentCol = 0;
        
        for (int i = 0; i < amountOfRows * amountOfCols; i++)
        {
            gameTiles.add(i, new ImageView(context));
        }
        
        for (ImageView tile : gameTiles)
        {
            tile.setImageResource(R.drawable.blank);
    
            //Set tags to get some info from tiles later
            tile.setTag(R.integer.tileType,  TileType.BLANK);
            tile.setTag(R.integer.tileRow, currentRow);
            tile.setTag(R.integer.tileCol, currentCol);
            
            //Set how tiles are in layout
            GridLayout.LayoutParams tileParams = new GridLayout.LayoutParams();
            tileParams.rowSpec = GridLayout.spec(currentRow);
            tileParams.columnSpec = GridLayout.spec(currentCol);
            tileParams.width = tileSideSize;
            tileParams.height = tileSideSize;
            tileParams.setMargins(1,1,1,1);
            
            //Add tile to game
            gameLayout.addView(tile, tileParams);
            
            //Create onTouchListener to tile
            tile.setOnClickListener(new View.OnClickListener()
            {
                @Override
                public void onClick(View view)
                {
                    setChoice((ImageView) view);
                }
            });
            
            //Add tile to gameTile array
            
            
            //Do basic looping increase value stuff
            currentCol++;
            if (currentCol == amountOfCols)
            {
                currentCol = 0;
                currentRow++;
            }
        }
    }

private void setChoice(ImageView view)
        {
            if (!isWon)
            {
                //Check that tile is empty
                if (view.getTag(R.integer.tileType) == TileType.BLANK)
                {
                    if (currentPlayer == player1)
                    {
                        view.setImageResource(R.drawable.x);
                        view.setTag(R.integer.tileType, TileType.X);
                    }
                    else
                    {
                        view.setImageResource(R.drawable.o);
                        view.setTag(R.integer.tileType, TileType.O);
                    }
    
                    if (checkIfWon(view))
                    {
                        isWon = true;
                    }
                    changePlayer();
                }
            }
        
        }
    
    private void changePlayer()
    {
        if(currentPlayer == player1)
        {
            currentPlayer = player2;
        }
        else
        {
            currentPlayer = player1;
        }
    }
    
    private boolean checkIfWon(ImageView tile)
    {
        class CheckRow
        {
            public int firstCol;
            public int lastCol;
            private ImageView tile;
    
            CheckRow(ImageView tile)
            {
                this.tile = tile;
                createRow();
            }
            
            public void createRow()
            {
                //Get first and last tile's col value. Begining and end of row.
                firstCol = (int)tile.getTag(R.integer.tileCol) - (checkRowArrayLength /2);
                lastCol = (int)tile.getTag(R.integer.tileCol) + (checkRowArrayLength /2);
                moveRowInBounds();
            }
            private void moveRowInBounds()
            {
                //Move values in bounds
                if (firstCol < 0)
                {
                    firstCol = 0;
                }
                else if (lastCol > (amountOfCols - 1))
                {
                    lastCol = (amountOfCols - 1);
                }
            }
            
            public boolean tileIsInCheckRow(ImageView otherTile)
            {           //1. Is tile in same row in game board?
                        //2. - 3. Is tile close enough to matter
                return ((int)tile.getTag(R.integer.tileRow) == (int)otherTile.getTag(R.integer.tileRow) &&
                        (int)otherTile.getTag(R.integer.tileCol) >= firstCol &&
                        (int)otherTile.getTag(R.integer.tileCol) <= lastCol) ;
            }
        }
        class CheckCol
        {
            public int firstRow;
            public int lastRow;
            private ImageView tile;
    
            CheckCol(ImageView tile)
            {
                this.tile = tile;
                createCol();
                moveColInBounds();
            }
    
            public void createCol()
            {
                //Get first and last tile's row value. (Begining and end of col).
                firstRow = (int)tile.getTag(R.integer.tileRow) - (checkColArrayLength /2);
                lastRow = (int)tile.getTag(R.integer.tileRow) + (checkColArrayLength  /2);
            }
            private void moveColInBounds()
            {
                //Move values in bounds
                if (firstRow < 0)
                {
                    firstRow = 0;
                }
                else if (lastRow > (amountOfRows - 1))
                {
                    lastRow = (amountOfRows - 1);
                }
            }
    
            public boolean tileIsInCheckCol(ImageView otherTile)
            {   //1. Is tile in same col in game board?
                //2. - 3. Is tile close enough to matter
                return ((int)tile.getTag(R.integer.tileCol) == (int)otherTile.getTag(R.integer.tileCol) &&
                        (int)otherTile.getTag(R.integer.tileRow) >= firstRow &&
                        (int)otherTile.getTag(R.integer.tileRow) <= lastRow);
            }
        }
        class CheckLtrCross
        {
            int firstCol;
            int firstRow;
            int lastCol;
            int lastRow;
            
            int currentCol;
            int currentRow;
            
            CheckLtrCross(ImageView tile)
            {
                
                //Get first and last tile's row value. (Begining and end of col).
                firstRow = (int)tile.getTag(R.integer.tileRow) - (minCheckArrayLength /2);
                lastRow = (int)tile.getTag(R.integer.tileRow) + (minCheckArrayLength   /2);
                //Get first and last tile's col value. Begining and end of row.
                firstCol = (int)tile.getTag(R.integer.tileCol) - (minCheckArrayLength  /2);
                lastCol = (int)tile.getTag(R.integer.tileCol) + (minCheckArrayLength  /2);
                
                moveInBoundsAndResize();
                
                currentCol = firstCol;
                currentRow = firstRow;
                
            }
            
            private void moveInBoundsAndResize()
            {
                //If ltrCross goes over of bounds in left, move it right and cut of part going out
                if (firstCol < 0)
                {
                    firstRow += -firstCol;
                    firstCol = 0;
                }
                //If ltrCross goes over of bounds in right, move it left and cut of part going out
                else if (lastCol > amountOfCols - 1)
                {
                    lastRow += ((amountOfCols - 1) - lastCol);
                    lastCol = (amountOfCols - 1);
                }
                //If ltrCross goes over of bounds in up, move it down and cut of part going out
                if (firstRow < 0)
                {
                    firstCol += -firstRow;
                    firstRow = 0;
                }
                //If ltrCross goes over of bounds in down, move it up and cut part going out
                else if (lastRow > amountOfRows - 1)
                {
                    lastCol += (amountOfRows - 1) - lastRow;
                    lastRow = (amountOfRows - 1);
                }
            }
            
            public boolean tileIsInLtrCheckCross(ImageView othertile)
            {
                if (currentRow <= lastRow && currentCol <= lastCol)
                {
                    if ((int) othertile.getTag(R.integer.tileCol) == currentCol &&
                            (int) othertile.getTag(R.integer.tileRow) == currentRow)
                    {
                        currentCol++;
                        currentRow++;
                        return true;
                    }
                }
                return false;
            }
        }
    
        class CheckRtlCross
        {
            int firstCol;
            int firstRow;
            int lastCol;
            int lastRow;
        
            int currentCol;
            int currentRow;
            int cols = 0;
        
            CheckRtlCross(ImageView tile)
            {
                //Get first and last tile's row value. (Begining and end of col).
                firstRow = (int)tile.getTag(R.integer.tileRow) - (minCheckArrayLength /2);
                lastRow = (int)tile.getTag(R.integer.tileRow) + (minCheckArrayLength  /2);
                //Get first and last tile's col value. Begining and end of row.
                firstCol = (int)tile.getTag(R.integer.tileCol) - (minCheckArrayLength  /2);
                lastCol = (int)tile.getTag(R.integer.tileCol) + (minCheckArrayLength  /2);
    
                moveInBoundsAndResize();
    
                currentCol = lastCol;
                currentRow = firstRow;
            }
            
            private void moveInBoundsAndResize()
            {
                if (firstRow < 0)
                {
                    lastCol += firstRow;
                    firstRow = 0;
                }
                else if (lastRow >= amountOfRows - 1)
                {
                    firstCol += (lastRow - (amountOfRows - 1));
                    lastRow = amountOfRows - 1;
                }
                if (lastCol >= amountOfCols)
                {
                    firstRow += -((amountOfCols - 1) - lastCol);
                    lastCol = amountOfCols - 1;
                }
                else if (firstCol < 0)
                {
                    lastRow += -firstCol;
                    firstCol = 0;
                }
            }
        
            public boolean tileIsInRtlCheckCross(ImageView tile)
            {
                
                
                if (currentCol >= firstCol && currentRow <= lastRow)
                {
                    if ((int) tile.getTag(R.integer.tileCol) == currentCol &&
                            (int) tile.getTag(R.integer.tileRow) == currentRow)
                    {
                        currentCol--;
                        currentRow++;
                        return true;
                    }
                }
                return false;
            }
        }
        
        
        CheckRow checkRow = new CheckRow(tile);
        CheckCol checkCol = new CheckCol(tile);
        CheckLtrCross checkLtrCross = new CheckLtrCross(tile);
        CheckRtlCross checkRtlCross = new CheckRtlCross(tile);
        
        int rowI = 0;
        int colI = 0;
        int ltrCrossI = 0;
        int rtlCrossI = 0;
        
        
        for (ImageView otherTile : gameTiles)
        {
            
            if (checkRow.tileIsInCheckRow(otherTile))
            {
                rowToCheck.add(otherTile);
            }
            if (checkCol.tileIsInCheckCol(otherTile))
            {
                colToCheck.add(otherTile);
            }
            if (checkLtrCross.tileIsInLtrCheckCross(otherTile))
            {
                ltrCrossCheck.add(otherTile);
            }
            if (checkRtlCross.tileIsInRtlCheckCross(otherTile))
            {
                rtlCrossCheck.add(otherTile);
            }
        }
        
        checkArrays.add(rowToCheck);
        checkArrays.add(colToCheck);
        checkArrays.add(ltrCrossCheck);
        checkArrays.add(rtlCrossCheck);
        
        //These values are used in cheking
        TileType wantedTileType = (TileType) tile.getTag(R.integer.tileType);
        int correctTiles = 0;
        
        for (List<ImageView> checkArray : checkArrays)
        {
            for (ImageView checkTile : checkArray)
            {
                if (checkTile.getTag(R.integer.tileType) == wantedTileType)
                {
                    correctTiles++;
                }
                else
                {
                    correctTiles = 0;
                }
                if(correctTiles >= inRowToWin)
                {
                    return true;
                }
            }
            //Reset amount of correct tiles for next checkArray
            correctTiles = 0;
        }
        
        return false;
    }
}

